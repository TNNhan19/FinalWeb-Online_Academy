import express from "express";
import { pool } from "../configs/db.js";
import multer from "multer";
import path from "path";
import fs from "fs";

const uploadDir = path.join(process.cwd(), "Public", "uploads");
if (!fs.existsSync(uploadDir)) fs.mkdirSync(uploadDir, { recursive: true });

const storage = multer.diskStorage({
  destination: (req, file, cb) => cb(null, uploadDir),
  filename: (req, file, cb) => {
    const unique = Date.now() + "-" + Math.round(Math.random() * 1e9);
    cb(null, unique + path.extname(file.originalname));
  },
});
const upload = multer({ storage });

const router = express.Router();

// ‚úÖ Middleware ki·ªÉm tra quy·ªÅn gi·∫£ng vi√™n
function requireInstructor(req, res, next) {
  if (!req.session.user) return res.redirect("/auth/login");
  if (req.session.user.role !== "instructor") return res.redirect("/");
  next();
}

// ====================
// TRANG CH√çNH GI·∫¢NG VI√äN
// ====================
router.get("/", requireInstructor, async (req, res) => {
  const accountId = req.session.user.account_id;
  const instructorName = req.session.user.full_name;

  try {
    const { rows: stats } = await pool.query(
      `
      SELECT
        COUNT(*) FILTER (WHERE status = 'complete') AS courses,
        COALESCE(SUM(total_lectures), 0) AS lectures
      FROM courses c
      JOIN instructors i ON c.instructor_id = i.instructor_id
      WHERE i.account_id = $1
      `,
      [accountId]
    );

    res.render("instructor/index", {
      layout: "main",
      pageTitle: "Trang gi·∫£ng vi√™n",
      instructor: { name: instructorName },
      stats: stats[0] || { courses: 0, lectures: 0 },
    });
  } catch (err) {
    console.error("‚ùå L·ªói khi t·∫£i trang gi·∫£ng vi√™n:", err.message);
    res.render("instructor/index", {
      layout: "main",
      pageTitle: "Trang gi·∫£ng vi√™n",
      instructor: { name: instructorName },
      stats: { courses: 0, lectures: 0 },
      error: "Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu. Vui l√≤ng th·ª≠ l·∫°i.",
    });
  }
});

// ====================
// DASHBOARD ‚Äì KH√ìA H·ªåC C·ª¶A T√îI
// ====================
router.get("/dashboard", requireInstructor, async (req, res) => {
  const accountId = req.session.user.account_id;

  try {
    const q = `
      SELECT c.*, cat.name AS category_name
      FROM courses c
      JOIN instructors i ON c.instructor_id = i.instructor_id
      LEFT JOIN categories cat ON c.category_id = cat.category_id
      WHERE i.account_id = $1
      ORDER BY c.created_at DESC
    `;
    const { rows } = await pool.query(q, [accountId]);

    res.render("instructor/dashboard", {
      layout: "main",
      pageTitle: "Kh√≥a h·ªçc c·ªßa t√¥i",
      courses: rows,
    });
  } catch (err) {
    console.error("‚ùå L·ªói khi t·∫£i dashboard:", err.message);
    res.render("instructor/dashboard", {
      layout: "main",
      pageTitle: "Kh√≥a h·ªçc c·ªßa t√¥i",
      courses: [],
      error: "Kh√¥ng th·ªÉ t·∫£i danh s√°ch kh√≥a h·ªçc.",
    });
  }
});

// ====================
// T·∫†O KH√ìA H·ªåC M·ªöI
// ====================
router.get("/new", requireInstructor, async (req, res) => {
  try {
    const { rows: categories } = await pool.query(
      "SELECT * FROM categories ORDER BY name ASC"
    );
    res.render("instructor/course_form", {
      layout: "main",
      pageTitle: "ƒêƒÉng kh√≥a h·ªçc m·ªõi",
      isNew: true,
      categories,
    });
  } catch (err) {
    console.error("‚ùå L·ªói khi t·∫£i form ƒëƒÉng kh√≥a h·ªçc:", err.message);
    res.redirect("/instructor/dashboard");
  }
});

// ====================
// T·∫†O KH√ìA H·ªåC M·ªöI (C√ì UPLOAD ·∫¢NH)
// ====================
router.post("/new", requireInstructor, upload.single("image_file"), async (req, res) => {
  const accountId = req.session.user.account_id;

  try {
    // üîπ L·∫•y instructor_id t·ª´ account_id
    const { rows: inst } = await pool.query(
      "SELECT instructor_id FROM instructors WHERE account_id = $1",
      [accountId]
    );

    if (!inst.length) {
      return res.send("‚ùå Kh√¥ng t√¨m th·∫•y h·ªì s∆° gi·∫£ng vi√™n.");
    }

    // üîπ L·∫•y d·ªØ li·ªáu t·ª´ form
    const {
      title,
      description,
      detail_html,
      category_id,
      total_hours,
      total_lectures,
      current_price,
      original_price,
    } = req.body;

    // üîπ X·ª≠ l√Ω ·∫£nh upload
    const image_url = req.file
      ? `/uploads/${req.file.filename}`  // N·∫øu upload file m·ªõi
      : req.body.image_url || null;      // N·∫øu kh√¥ng upload, l·∫•y link s·∫µn c√≥

    // üîπ L∆∞u v√†o database
    await pool.query(
      `
      INSERT INTO courses 
        (title, description, detail_html, image_url, instructor_id, category_id, 
         total_hours, total_lectures, current_price, original_price, status, created_at)
      VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,'incomplete',NOW())
      `,
      [
        title,
        description,
        detail_html,
        image_url,
        inst[0].instructor_id,
        category_id || null,
        total_hours || 0,
        total_lectures || 0,
        current_price,
        original_price,
      ]
    );

    res.redirect("/instructor/dashboard");
  } catch (err) {
    console.error("‚ùå L·ªói khi ƒëƒÉng kh√≥a h·ªçc:", err.message);
    res.render("instructor/course_form", {
      layout: "main",
      pageTitle: "ƒêƒÉng kh√≥a h·ªçc m·ªõi",
      error: "Kh√¥ng th·ªÉ ƒëƒÉng kh√≥a h·ªçc. Vui l√≤ng th·ª≠ l·∫°i.",
      isNew: true,
    });
  }
});


// ====================
// CH·ªàNH S·ª¨A KH√ìA H·ªåC (HI·ªÇN TH·ªä FORM)
// ====================
router.get("/edit/:id", requireInstructor, async (req, res) => {
  const { id } = req.params;
  const accountId = req.session.user.account_id;

  try {
    const { rows: courseRows } = await pool.query(
      `
      SELECT c.*, cat.name AS category_name
      FROM courses c
      JOIN instructors i ON c.instructor_id = i.instructor_id
      LEFT JOIN categories cat ON c.category_id = cat.category_id
      WHERE c.course_id = $1 AND i.account_id = $2
      `,
      [id, accountId]
    );

    if (!courseRows.length) {
      return res.redirect("/instructor/dashboard");
    }

    const course = courseRows[0];
    const { rows: categories } = await pool.query("SELECT * FROM categories ORDER BY name ASC");
    const { rows: sections } = await pool.query(
      "SELECT * FROM course_sections WHERE course_id = $1 ORDER BY order_index",
      [id]
    );
    const { rows: lectures } = await pool.query(
      `
      SELECT l.*, s.title AS section_title 
      FROM lectures l 
      JOIN course_sections s ON s.section_id = l.section_id 
      WHERE s.course_id = $1 
      ORDER BY s.order_index, l.order_index
      `,
      [id]
    );

    res.render("instructor/course_form", {
      layout: "main",
      pageTitle: "C·∫≠p nh·∫≠t kh√≥a h·ªçc",
      isNew: false,
      course,
      categories,
      sections,
      lectures,
    });
  } catch (err) {
    console.error("‚ùå L·ªói khi ch·ªânh s·ª≠a kh√≥a h·ªçc:", err.message);
    res.redirect("/instructor/dashboard");
  }
});

// ====================
// C·∫¨P NH·∫¨T (CH·ªàNH S·ª¨A) KH√ìA H·ªåC
// ====================
router.post("/edit/:id", requireInstructor, upload.single("image_file"), async (req, res) => {
  const { id } = req.params;
  const accountId = req.session.user.account_id;

  try {
    // üîí Ki·ªÉm tra quy·ªÅn s·ªü h·ªØu
    const { rows: ownership } = await pool.query(
      `
      SELECT c.*, i.instructor_id
      FROM courses c
      JOIN instructors i ON c.instructor_id = i.instructor_id
      WHERE c.course_id = $1 AND i.account_id = $2
      `,
      [id, accountId]
    );

    if (!ownership.length) {
      return res.status(403).send("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn ch·ªânh s·ª≠a kh√≥a h·ªçc n√†y.");
    }

    const oldCourse = ownership[0];

    // üßæ L·∫•y d·ªØ li·ªáu t·ª´ form
    const {
      title,
      description,
      detail_html,
      category_id,
      total_hours,
      total_lectures,
      current_price,
      original_price,
      status,
    } = req.body;

    // üñºÔ∏è X·ª≠ l√Ω ·∫£nh upload
    const image_url = req.file
      ? `/uploads/${req.file.filename}`
      : oldCourse.image_url;

    // üíæ C·∫≠p nh·∫≠t DB
    await pool.query(
      `
      UPDATE courses
      SET
        title = $1,
        description = $2,
        detail_html = $3,
        image_url = $4,
        category_id = $5,
        total_hours = $6,
        total_lectures = $7,
        current_price = $8,
        original_price = $9,
        status = $10
      WHERE course_id = $11
      `,
      [
        title,
        description,
        detail_html,
        image_url,
        category_id || null,
        total_hours || 0,
        total_lectures || 0,
        current_price,
        original_price,
        status || "incomplete",
        id,
      ]
    );

    console.log(`‚úÖ Kh√≥a h·ªçc ${id} ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t b·ªüi ${req.session.user.full_name}`);
    res.redirect("/instructor/dashboard");
  } catch (err) {
    console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t kh√≥a h·ªçc:", err.message);
    res.status(500).render("instructor/course_form", {
      layout: "main",
      pageTitle: "C·∫≠p nh·∫≠t kh√≥a h·ªçc",
      error: "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t kh√≥a h·ªçc. Vui l√≤ng th·ª≠ l·∫°i.",
      isNew: false,
    });
  }
});



// ====================
// H·ªí S∆† GI·∫¢NG VI√äN
// ====================
router.get("/profile", requireInstructor, async (req, res) => {
  const accountId = req.session.user.account_id;

  try {
    const { rows: profileRows } = await pool.query(
      `
      SELECT i.*, a.email, a.full_name
      FROM instructors i
      JOIN accounts a ON i.account_id = a.account_id
      WHERE i.account_id = $1
      `,
      [accountId]
    );

    const profile = profileRows[0];

    if (!profile) {
      return res.render("instructor/profile", {
        layout: "main",
        pageTitle: "H·ªì s∆° gi·∫£ng vi√™n",
        error: "Kh√¥ng t√¨m th·∫•y h·ªì s∆° gi·∫£ng vi√™n. Vui l√≤ng t·∫°o m·ªõi!",
      });
    }

    const { rows: courseRows } = await pool.query(
      `
      SELECT c.course_id, c.title, c.status, c.current_price, cat.name AS category_name
      FROM courses c
      LEFT JOIN categories cat ON c.category_id = cat.category_id
      WHERE c.instructor_id = $1
      ORDER BY c.created_at DESC
      `,
      [profile.instructor_id]
    );

    res.render("instructor/profile", {
      layout: "main",
      pageTitle: "H·ªì s∆° gi·∫£ng vi√™n",
      profile,
      courses: courseRows,
    });
  } catch (err) {
    console.error("‚ùå L·ªói khi t·∫£i h·ªì s∆° gi·∫£ng vi√™n:", err.message);
    res.render("instructor/profile", {
      layout: "main",
      pageTitle: "H·ªì s∆° gi·∫£ng vi√™n",
      error: "Kh√¥ng th·ªÉ t·∫£i h·ªì s∆°. Vui l√≤ng th·ª≠ l·∫°i.",
    });
  }
});

// ====================
// CHI TI·∫æT KH√ìA H·ªåC C·ª¶A GI·∫¢NG VI√äN
// ====================
router.get("/detail/:id", requireInstructor, async (req, res) => {
  const courseId = req.params.id;
  const accountId = req.session.user.account_id;

  try {
    // ‚úÖ L·∫•y th√¥ng tin kh√≥a h·ªçc, k√®m th√¥ng tin gi·∫£ng vi√™n
    const { rows: courseRows } = await pool.query(
      `
      SELECT c.*, cat.name AS category_name, i.name AS instructor_name, i.bio AS instructor_bio
      FROM courses c
      JOIN instructors i ON c.instructor_id = i.instructor_id
      LEFT JOIN categories cat ON c.category_id = cat.category_id
      WHERE c.course_id = $1 AND i.account_id = $2
      `,
      [courseId, accountId]
    );

    if (!courseRows.length) {
      return res.redirect("/instructor/dashboard");
    }

    const course = courseRows[0];

    // ‚úÖ L·∫•y danh s√°ch ch∆∞∆°ng & b√†i gi·∫£ng
    const { rows: sections } = await pool.query(
      "SELECT * FROM course_sections WHERE course_id = $1 ORDER BY order_index",
      [courseId]
    );

    const { rows: lectures } = await pool.query(
      `
      SELECT * 
      FROM lectures 
      WHERE section_id IN (SELECT section_id FROM course_sections WHERE course_id = $1)
      ORDER BY order_index
      `,
      [courseId]
    );

    // ‚úÖ Render view chi ti·∫øt kh√≥a h·ªçc
    res.render("instructor/course_detail", {
      layout: "main",
      pageTitle: `Chi ti·∫øt kh√≥a h·ªçc - ${course.title}`,
      course,
      sections,
      lectures,
    });
  } catch (err) {
    console.error("‚ùå L·ªói khi t·∫£i chi ti·∫øt kh√≥a h·ªçc:", err.message);
    res.redirect("/instructor/dashboard");
  }
});

// ====================
// C·∫¨P NH·∫¨T C·∫§U TR√öC KH√ìA H·ªåC (CH∆Ø∆†NG & B√ÄI GI·∫¢NG)
// ====================
router.post("/update-structure/:courseId", requireInstructor, async (req, res) => {
  const { courseId } = req.params;
  const { sections } = req.body;
  const accountId = req.session.user.account_id;

  try {
    // üîí Ki·ªÉm tra quy·ªÅn gi·∫£ng vi√™n s·ªü h·ªØu kh√≥a h·ªçc
    const check = await pool.query(
      `
      SELECT c.course_id
      FROM courses c
      JOIN instructors i ON c.instructor_id = i.instructor_id
      WHERE c.course_id = $1 AND i.account_id = $2
      `,
      [courseId, accountId]
    );
    if (!check.rowCount) {
      return res.status(403).json({ message: "B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠a kh√≥a h·ªçc n√†y." });
    }

    // ==========================
    // X√ìA C·∫§U TR√öC C≈® (n·∫øu c√≥)
    // ==========================
    await pool.query(
      "DELETE FROM lectures WHERE section_id IN (SELECT section_id FROM course_sections WHERE course_id = $1)",
      [courseId]
    );
    await pool.query("DELETE FROM course_sections WHERE course_id = $1", [courseId]);

    // ==========================
    // L∆ØU C·∫§U TR√öC M·ªöI
    // ==========================
    for (let sIndex = 0; sIndex < sections.length; sIndex++) {
      const section = sections[sIndex];
      const sectionRes = await pool.query(
        `INSERT INTO course_sections (course_id, title, order_index)
         VALUES ($1, $2, $3) RETURNING section_id`,
        [courseId, section.title, sIndex + 1]
      );
      const sectionId = sectionRes.rows[0].section_id;

      for (let lIndex = 0; lIndex < section.lectures.length; lIndex++) {
        const lec = section.lectures[lIndex];
        await pool.query(
          `INSERT INTO lectures (section_id, title, video_url, duration, is_preview, order_index)
           VALUES ($1,$2,$3,$4,$5,$6)`,
          [sectionId, lec.title, lec.video_url, lec.duration || 0, lec.is_preview, lIndex + 1]
        );
      }
    }

    // ==========================
    // C·∫¨P NH·∫¨T TR·∫†NG TH√ÅI KH√ìA H·ªåC
    // ==========================
    await pool.query(
      `
      UPDATE courses 
      SET status = 'complete'
      WHERE course_id = $1 AND NOT EXISTS (
        SELECT 1 FROM course_sections cs
        LEFT JOIN lectures l ON cs.section_id = l.section_id
        WHERE cs.course_id = $1 AND l.lecture_id IS NULL
      )
      `,
      [courseId]
    );

    res.json({ message: "ƒê√£ l∆∞u thay ƒë·ªïi th√†nh c√¥ng!" });
  } catch (err) {
    console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t c·∫•u tr√∫c kh√≥a h·ªçc:", err.message);
    res.status(500).json({ message: "Kh√¥ng th·ªÉ l∆∞u thay ƒë·ªïi." });
  }
});


export default router;
