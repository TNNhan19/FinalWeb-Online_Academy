import express from "express";
import bcrypt from "bcryptjs";
import {
  getProfileById,
  updateProfile,
  getWatchlist,
  removeFromWatchlist,
  getEnrolledCourses,
} from "../models/profileModel.js";

const router = express.Router();

// üß© Xem h·ªì s∆°
router.get("/", async (req, res) => {
  const user = req.user;
  if (!user) return res.redirect("/auth/signin");

  const profile = await getProfileById(user.account_id);
  res.render("vwProfile/index", {
    title: "H·ªì s∆° c√° nh√¢n",
    profile,
  });
});

// üß© C·∫≠p nh·∫≠t h·ªì s∆°
router.post("/update", async (req, res) => {
  const { full_name, email, old_password, new_password } = req.body;
  const user = req.user;
  const profile = await getProfileById(user.account_id);

  let updatedData = { full_name, email };

  if (new_password && old_password) {
    const isMatch = await bcrypt.compare(old_password, profile.password_hash);
    if (!isMatch) {
      return res.render("vwProfile/index", {
        title: "H·ªì s∆° c√° nh√¢n",
        profile,
        error: "M·∫≠t kh·∫©u c≈© kh√¥ng ƒë√∫ng!",
      });
    }
    const hash = await bcrypt.hash(new_password, 10);
    updatedData.password_hash = hash;
  }

  await updateProfile(user.account_id, updatedData);
  res.redirect("/profile");
});

// üß© Xem danh s√°ch y√™u th√≠ch
router.get("/watchlist", async (req, res) => {
  const user = req.user;
  const list = await getWatchlist(user.account_id);
  res.render("vwProfile/watchlist", {
    title: "Kho√° h·ªçc y√™u th√≠ch",
    courses: list,
  });
});

// üß© X√≥a kh√≥a y√™u th√≠ch
router.post("/watchlist/remove/:id", async (req, res) => {
  const user = req.user;
  await removeFromWatchlist(user.account_id, req.params.id);
  res.redirect("/profile/watchlist");
});

// üß© Danh s√°ch kh√≥a h·ªçc ƒë√£ ƒëƒÉng k√Ω
router.get("/enrolled", async (req, res) => {
  const user = req.user;
  const list = await getEnrolledCourses(user.account_id);
  res.render("vwProfile/enrolled", {
    title: "Kho√° h·ªçc c·ªßa t√¥i",
    courses: list,
  });
});

export default router;
