import express from "express";
import bcrypt from "bcryptjs";
import nodemailer from "nodemailer";
import dotenv from "dotenv";
dotenv.config();
import {
  getProfileById,
  updateProfile,
  getWatchlist,
  addToWatchlist,
  removeFromWatchlist,
  getEnrolledCourses,
  createOTP,
  verifyOTP,
  isInWatchlist,
} from "../models/profileModel.js";

const router = express.Router();

// Ensure `req.user` is populated from session or res.locals so routes can use it
router.use((req, res, next) => {
  if (!req.user) {
    req.user = req.session?.user || res.locals.user || null;
  }
  next();
});

// üß© Xem h·ªì s∆°
router.get("/", async (req, res) => {
  const user = req.user;
  if (!user) return res.redirect("/auth/login");

  const profile = await getProfileById(user.account_id);
  console.log("User:", user);
  console.log("Profile:", profile);
  res.render("profile/view", {
    title: "H·ªì s∆° c√° nh√¢n",
    profile,
  });
});

// üß© Trang ch·ªânh s·ª≠a h·ªì s∆°
// Trang ch·ªânh s·ª≠a h·ªì s∆°
router.get("/edit", async (req, res) => {
  if (!req.user) return res.redirect("/auth/login");

  // Ki·ªÉm tra session c√≥ verified ch∆∞a
  if (!req.session.isVerified) {
    try {
      const profile = await getProfileById(req.user.account_id);
      const otpInfo = await createOTP(profile.email);

      // G·ª≠i email ch·ª©a OTP (n·∫øu c·∫•u h√¨nh MAIL_USER/MAIL_PASS c√≥ s·∫µn)
      try {
        if (!process.env.MAIL_USER || !process.env.MAIL_PASS) throw new Error('Mail config missing');

        const transporter = nodemailer.createTransport({
          service: 'gmail',
          auth: {
            user: process.env.MAIL_USER,
            pass: process.env.MAIL_PASS,
          },
        });

        await transporter.sendMail({
          from: process.env.MAIL_USER,
          to: profile.email,
          subject: 'M√£ OTP x√°c th·ª±c - Online Academy',
          text: `M√£ OTP c·ªßa b·∫°n l√†: ${otpInfo.otp}. M√£ c√≥ hi·ªáu l·ª±c trong v√†i ph√∫t. N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu m√£ n√†y, h√£y b·ªè qua email n√†y.`,
        });
      } catch (mailErr) {
        // N·∫øu g·ª≠i mail th·∫•t b·∫°i, in OTP ra console ƒë·ªÉ test
        console.warn('Could not send OTP email, falling back to console. Reason:', mailErr.message);
        console.log('OTP for testing:', otpInfo.otp);
      }

      return res.render("profile/verify", {
        title: "X√°c th·ª±c t√†i kho·∫£n",
        email: profile.email,
        success: 'M√£ OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i. Ki·ªÉm tra email ho·∫∑c console server n·∫øu kh√¥ng nh·∫≠n ƒë∆∞·ª£c.'
      });
    } catch (error) {
      console.error("Error sending OTP:", error);
      return res.redirect("/profile");
    }
  }

  // N·∫øu ƒë√£ verified, hi·ªÉn th·ªã form edit
  const profile = await getProfileById(req.user.account_id);
  res.render("profile/edit", {
    title: "Ch·ªânh s·ª≠a h·ªì s∆°",
    profile
  });
});

// X√°c th·ª±c OTP
router.post("/verify-otp", async (req, res) => {
  if (!req.user) return res.redirect("/auth/login");

  const { otp } = req.body;
  const profile = await getProfileById(req.user.account_id);

  const isValid = await verifyOTP(profile.email, otp);
  if (!isValid) {
    return res.render("profile/verify", {
      title: "X√°c th·ª±c t√†i kho·∫£n",
      email: profile.email,
      error: "M√£ x√°c th·ª±c kh√¥ng ƒë√∫ng"
    });
  }

  // L∆∞u tr·∫°ng th√°i ƒë√£ x√°c th·ª±c v√†o session
  req.session.isVerified = true;
  res.redirect("/profile/edit");
});

// G·ª≠i l·∫°i OTP
router.post("/resend-otp", async (req, res) => {
  if (!req.user) return res.redirect("/auth/login");

    try {
      const profile = await getProfileById(req.user.account_id);
      const otpInfo = await createOTP(profile.email);

      try {
        if (!process.env.MAIL_USER || !process.env.MAIL_PASS) throw new Error('Mail config missing');

        const transporter = nodemailer.createTransport({
          service: 'gmail',
          auth: {
            user: process.env.MAIL_USER,
            pass: process.env.MAIL_PASS,
          },
        });

        await transporter.sendMail({
          from: process.env.MAIL_USER,
          to: profile.email,
          subject: 'M√£ OTP x√°c th·ª±c - Online Academy',
          text: `M√£ OTP c·ªßa b·∫°n l√†: ${otpInfo.otp}. M√£ c√≥ hi·ªáu l·ª±c trong v√†i ph√∫t. N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu m√£ n√†y, h√£y b·ªè qua email n√†y.`,
        });
      } catch (mailErr) {
        console.warn('Could not send OTP email on resend, falling back to console. Reason:', mailErr.message);
        console.log('New OTP for testing:', otpInfo.otp);
      }

      res.render("profile/verify", {
        title: "X√°c th·ª±c t√†i kho·∫£n",
        email: profile.email,
        success: "ƒê√£ g·ª≠i l·∫°i m√£ x√°c th·ª±c (ho·∫∑c xem console server n·∫øu kh√¥ng nh·∫≠n ƒë∆∞·ª£c)."
      });
    } catch (error) {
      console.error("Error resending OTP:", error);
      res.redirect("/profile");
    }
});

// C·∫≠p nh·∫≠t th√¥ng tin
router.post("/update", async (req, res) => {
  if (!req.user) return res.redirect("/auth/login");
  if (!req.session.isVerified) return res.redirect("/profile/edit");

  const { full_name, old_password, new_password, confirm_password } = req.body;
  const profile = await getProfileById(req.user.account_id);

  try {
    let updateData = { full_name };

    // N·∫øu c√≥ nh·∫≠p m·∫≠t kh·∫©u
    if (new_password) {
      if (!old_password) {
        return res.render("profile/edit", {
          title: "Ch·ªânh s·ª≠a h·ªì s∆°",
          profile,
          error: "Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u hi·ªán t·∫°i"
        });
      }

      if (new_password !== confirm_password) {
        return res.render("profile/edit", {
          title: "Ch·ªânh s·ª≠a h·ªì s∆°",
          profile,
          error: "M·∫≠t kh·∫©u m·ªõi kh√¥ng kh·ªõp"
        });
      }

      // Ki·ªÉm tra m·∫≠t kh·∫©u c≈©
      const match = await bcrypt.compare(old_password, profile.password_hash);
      if (!match) {
        return res.render("profile/edit", {
          title: "Ch·ªânh s·ª≠a h·ªì s∆°",
          profile,
          error: "M·∫≠t kh·∫©u hi·ªán t·∫°i kh√¥ng ƒë√∫ng"
        });
      }

      // Hash m·∫≠t kh·∫©u m·ªõi
      updateData.password_hash = await bcrypt.hash(new_password, 10);
    }

    // C·∫≠p nh·∫≠t th√¥ng tin
    await updateProfile(req.user.account_id, updateData);
    
    // X√≥a tr·∫°ng th√°i x√°c th·ª±c
  delete req.session.isVerified;
  // X√≥a tr·∫°ng th√°i x√°c th·ª±c m·∫≠t kh·∫©u t·∫°m th·ªùi ƒë·ªÉ b·∫Øt bu·ªôc nh·∫≠p l·∫°i l·∫ßn sau
  delete req.session.pwVerified;

    // C·∫≠p nh·∫≠t session user n·∫øu c√≥ thay ƒë·ªïi t√™n
    req.session.user.full_name = full_name;
    
    res.redirect("/profile");
  } catch (error) {
    console.error("Error updating profile:", error);
    res.render("profile/edit", {
      title: "Ch·ªânh s·ª≠a h·ªì s∆°",
      profile,
      error: "C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t th√¥ng tin"
    });
  }
});

// üß© Xem danh s√°ch y√™u th√≠ch
router.get("/watchlist", async (req, res) => {
  const user = req.user;
  const list = await getWatchlist(user.account_id);
  res.render("profile/watchlist", {
    title: "Kho√° h·ªçc y√™u th√≠ch",
    courses: list,
  });
});

// üß© Th√™m/X√≥a kh√≥a h·ªçc y√™u th√≠ch (API endpoints)
router.post("/watchlist/add/:id", async (req, res) => {
  if (!req.user) return res.status(401).json({ error: "Unauthorized" });
  try {
    await addToWatchlist(req.user.account_id, req.params.id);
    res.json({ success: true });
  } catch (error) {
    console.error("Error adding to watchlist:", error);
    res.status(500).json({ error: "Internal server error" });
  }
});

router.post("/watchlist/remove/:id", async (req, res) => {
  if (!req.user) return res.status(401).json({ error: "Unauthorized" });
  try {
    await removeFromWatchlist(req.user.account_id, req.params.id);
    res.json({ success: true });
  } catch (error) {
    console.error("Error removing from watchlist:", error);
    res.status(500).json({ error: "Internal server error" });
  }
});

// üß© Danh s√°ch kh√≥a h·ªçc ƒë√£ ƒëƒÉng k√Ω
router.get("/enrolled", async (req, res) => {
  const user = req.user;
  if (!user) return res.redirect("/auth/login");

  try {
    // L·∫•y danh s√°ch kh√≥a h·ªçc ƒë√£ ƒëƒÉng k√Ω
    const enrolledCourses = await getEnrolledCourses(user.account_id);
    
    // L·∫•y danh s√°ch kh√≥a h·ªçc y√™u th√≠ch
    const watchlistCourses = await getWatchlist(user.account_id);
    
    // ƒê√°nh d·∫•u c√°c kh√≥a h·ªçc c√≥ trong watchlist
    const enrolledWithWatchlist = await Promise.all(enrolledCourses.map(async course => ({
      ...course,
      is_in_watchlist: await isInWatchlist(user.account_id, course.course_id)
    })));

    res.render("profile/enrolled", {
      title: "Kho√° h·ªçc c·ªßa t√¥i",
      courses: enrolledWithWatchlist,
      watchlistCourses: watchlistCourses,
      helpers: {
        formatDate: function(date) {
          return new Date(date).toLocaleDateString('vi-VN');
        },
        formatPrice: function(price) {
          return new Intl.NumberFormat('vi-VN').format(price);
        }
      }
    });
  } catch (error) {
    console.error("Error fetching courses:", error);
    res.status(500).send("C√≥ l·ªói x·∫£y ra khi t·∫£i danh s√°ch kh√≥a h·ªçc");
  }
});

export default router;
