<div class="container my-4">

  {{!-- ======= VIDEO PLAYER SECTION ======= --}}
  <div class="video-player-container shadow-lg mb-4 rounded-3 overflow-hidden">
    <div id="plyr-root" class="position-relative w-100"></div>
    <div id="video-overlay-info"
      class="position-absolute bottom-0 start-0 text-white bg-dark bg-opacity-75 px-3 py-2 small rounded-top-end">
      {{#if courseData.sections.[0].lectures.[0]}}
      Đang xem: {{courseData.sections.[0].lectures.[0].title}}
      {{else}}
      Chưa có video bài giảng
      {{/if}}
    </div>
  </div>

  {{!-- ======= COURSE NAVIGATION TABS ======= --}}
  <ul class="nav nav-tabs mb-4 border-0 shadow-sm rounded-3 overflow-hidden bg-white" id="learnTabs" role="tablist">
    <li class="nav-item" role="presentation">
      <button class="nav-link active fw-semibold" id="tab-course" data-bs-toggle="tab" data-bs-target="#pane-course"
        type="button" role="tab" aria-controls="pane-course" aria-selected="true">
        <i class="bi bi-list-ul me-2"></i>Nội dung
      </button>
    </li>
    <li class="nav-item" role="presentation">
      <button class="nav-link fw-semibold" id="tab-reviews" data-bs-toggle="tab" data-bs-target="#pane-reviews"
        type="button" role="tab" aria-controls="pane-reviews" aria-selected="false">
        <i class="bi bi-star-fill me-2"></i>Đánh giá
      </button>
    </li>
  </ul>

  <div class="tab-content">
    {{!-- ==================== TAB 1: KHÓA HỌC ==================== --}}
    <div class="tab-pane fade show active" id="pane-course" role="tabpanel" aria-labelledby="tab-course">

      {{!-- Accordion: Danh sách chương & bài học --}}
      <div class="accordion mb-4" id="courseAccordion">
        {{#each courseData.sections}}
        <div class="accordion-item shadow-sm mb-3 border-0 rounded-3">
          <h2 class="accordion-header">
            <button class="accordion-button fw-semibold bg-light" type="button" data-bs-toggle="collapse"
              data-bs-target="#collapse-{{section_id}}">
              {{order_index}}. {{title}} ({{lectures.length}} bài)
            </button>
          </h2>
          <div id="collapse-{{section_id}}" class="accordion-collapse collapse {{#if (eq order_index 1)}}show{{/if}}"
            data-bs-parent="#courseAccordion">
            <div class="accordion-body p-0">
              <ul class="list-group list-group-flush">
                {{!-- ⭐ 1. MODIFIED LECTURE LINK --}}
                {{#each lectures}}
                <li
                  class="list-group-item list-group-item-action lecture-link d-flex justify-content-between align-items-center {{#if is_completed}}list-group-item-success{{/if}}"
                  data-video-url="{{video_url}}" 
                  data-lecture-title="{{title}}"
                  data-lecture-id="{{lecture_id}}" {{!-- Added lecture ID --}}
                  style="cursor:pointer;">
                  <span class="text-truncate">
                    {{#if is_completed}}
                      <i class="bi bi-check-circle-fill me-2 text-success lecture-icon"></i>
                    {{else}}
                      <i class="bi bi-play-circle me-2 text-secondary lecture-icon"></i>
                    {{/if}}
                    {{title}}
                  </span>
                  <small class="text-muted">{{formatDuration duration}}</small>
                </li>
                {{/each}}
                {{!-- ⭐ END MODIFIED LECTURE LINK --}}
              </ul>
            </div>
          </div>
        </div>
        {{else}}
        <div class="alert alert-info">Chưa có nội dung bài giảng.</div>
        {{/each}}
      </div>

      {{!-- Mô tả khóa học --}}
      <h5 class="fw-semibold mt-5 mb-3">Mô tả khóa học</h5>
      <div class="bg-light p-4 rounded-3">
        {{{courseData.course.detail_html}}}
      </div>
    </div>

    {{!-- ==================== TAB 2: ĐÁNH GIÁ ==================== --}}
    <div class="tab-pane fade" id="pane-reviews" role="tabpanel" aria-labelledby="tab-reviews">
      <h5 class="fw-semibold mb-3">Viết đánh giá của bạn</h5>
      {{#if isEnrolled}}
      <div class="card shadow-sm border-0 mb-4">
        <div class="card-body p-4">
          <form action="/learn/{{courseData.course.course_id}}/review" method="POST">
            <div class="mb-3">
              <label class="form-label fw-semibold">Bạn đánh giá khóa học này thế nào?</label>
              <div class="star-rating-input" data-rating="0">
                <i class="bi bi-star" data-value="1"></i>
                <i class="bi bi-star" data-value="2"></i>
                <i class="bi bi-star" data-value="3"></i>
                <i class="bi bi-star" data-value="4"></i>
                <i class="bi bi-star" data-value="5"></i>
              </div>
              <input type="hidden" name="rating" id="ratingInput" value="0" required>
            </div>
            <div class="mb-3">
              <label for="feedbackText" class="form-label fw-semibold">Viết nhận xét</label>
              <textarea class="form-control" id="feedbackText" name="feedback" rows="4"
                placeholder="Nội dung khóa học thế nào? Giảng viên có dễ hiểu không?..." required></textarea>
            </div>
            <button type="submit" class="btn btn-primary">Gửi đánh giá</button>
          </form>
        </div>
      </div>
      {{else}}
      <div class="alert alert-info">Bạn phải đăng ký khóa học để để lại đánh giá.</div>
      {{/if}}

      <h5 class="fw-semibold mt-5 mb-3">Các đánh giá khác</h5>
      {{#each courseData.reviews}}
      <div class="d-flex gap-3 mb-4 pb-4 border-bottom">
        <img src="https://placehold.co/40x40/7F8C8D/FFFFFF?text={{firstLetter student_name}}" alt="{{student_name}}" class="rounded-circle"
          style="width: 40px; height: 40px; object-fit: cover;">
        <div>
          <h6 class="fw-semibold mb-0">{{student_name}}</h6>
          <div class="d-flex align-items-center mb-1">
            <div class="star-rating-display text-warning" data-rating="{{rating}}">
              {{#each (stars rating)}}
                <i class="bi {{this}}"></i>
              {{/each}}
            </div>
            <small class="text-muted ms-2">{{formatDate created_at}}</small>
          </div>
          <p class="mb-0">{{feedback}}</p>
        </div>
      </div>
      {{else}}
      <p class="text-muted">Chưa có đánh giá nào cho khóa học này.</p>
      {{/each}}
    </div>
  </div>

</div>


{{!-- ==================== CSS ==================== --}}
{{#section 'css'}}
<style>
  .video-player-container {
    background: #000;
  }

  #plyr-root {
    min-height: 480px;
    aspect-ratio: 16 / 9;
  }
  @media (max-width: 767px) {
    #plyr-root { min-height: 250px; }
  }

  /* Star Rating Input */
  .star-rating-input>i {
    font-size: 1.5rem;
    color: #ccc;
    cursor: pointer;
    transition: color 0.2s;
  }
  .star-rating-input>i:hover,
  .star-rating-input>i.hover {
    color: #ffc107;
  }
  .star-rating-input>i.filled {
    color: #ffc107;
  }

  /* ⭐ ADDED: Style for completed lectures */
  .list-group-item.list-group-item-success {
      background-color: #f0fdf4; /* Light green */
      color: #3f621e; /* Dark green text */
  }
  .list-group-item.list-group-item-success .lecture-icon {
      color: var(--bs-success) !important; /* Bootstrap success color */
  }
</style>
{{/section}}


{{!-- ==================== PLYR + JS ==================== --}}
{{#section 'js'}}
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/plyr@3/dist/plyr.css" />
<script src="https://cdn.jsdelivr.net/npm/plyr@3/dist/plyr.polyfilled.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/hls.js@latest"></script>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const root = document.getElementById('plyr-root');
    const titleEl = document.getElementById('video-overlay-info');
    const lectureLinks = document.querySelectorAll('.lecture-link');

    let player = null;
    let hls = null;
    
    // ⭐ 2. ADDED: Variables to track state
    let currentLectureId = null;
    let currentLectureElement = null;
    const currentCourseId = {{courseData.course.course_id}}; // Get course ID from Handlebars

    // --- Helper functions ---
    const isYouTube = u => /youtu\.?be/.test(u || '');
    const isVimeo = u => /vimeo\.com/.test(u || '');
    const isHls = u => (u || '').includes('.m3u8');
    const isMP4 = u => /\.(mp4|webm|ogg)$/i.test(u || '');
    const toYouTubeId = u => (u || '').match(/(?:v=|youtu\.be\/)([\w-]{11})/)?.[1];
    const toVimeoId = u => (u || '').match(/vimeo\.com\/(\d+)/)?.[1];


    // ⭐ 3. ADDED: Function to send "complete" signal to server
    async function markLectureAsComplete() {
      if (!currentLectureId || !currentCourseId) return;

      // Find the lecture element in the list
      const lectureEl = document.querySelector(`.lecture-link[data-lecture-id="${currentLectureId}"]`);
      
      // If already marked as complete, do nothing
      if (lectureEl && lectureEl.classList.contains('list-group-item-success')) {
        // console.log(`Lecture ${currentLectureId} already complete.`);
        return; 
      }

      console.log(`Marking lecture ${currentLectureId} as complete for course ${currentCourseId}...`);

      try {
        const response = await fetch(`/learn/${currentCourseId}/complete`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          },
          body: JSON.stringify({ lectureId: parseInt(currentLectureId, 10) }) // Ensure ID is integer
        });

        if (!response.ok) {
          throw new Error(`Server responded with status ${response.status}`);
        }

        const result = await response.json();
        
        if (result.success) {
          console.log(`Successfully marked complete. New progress: ${result.newProgress}%`);
          // Update UI
          if (lectureEl) {
            lectureEl.classList.add('list-group-item-success');
            const icon = lectureEl.querySelector('.lecture-icon');
            if (icon) {
              icon.classList.remove('bi-play-circle', 'text-secondary');
              icon.classList.add('bi-check-circle-fill', 'text-success');
            }
          }
        } else {
           console.error('Server returned success:false', result.message);
        }
      } catch (error) {
        console.error('Error marking lecture complete:', error);
      }
    }


    function mountPlayer(url, element) {
      if (player?.destroy) player.destroy();
      if (hls) { hls.destroy(); hls = null; }

      // (Store lecture ID and element)
      currentLectureId = element.dataset.lectureId;
      currentLectureElement = element;

      if (!url) {
        root.innerHTML = `<div class="p-5 bg-dark text-white text-center rounded-3">Bài giảng này chưa có video.</div>`;
        return;
      }
      
      const controls = [
        'play-large', 'play', 'progress', 'current-time', 'mute', 
        'volume', 'captions', 'settings', 'pip', 'airplay', 'fullscreen'
      ];
      
      const commonConfig = { controls, invertTime: false, tooltips: { controls: true, seek: true }};

      if (isYouTube(url)) {
        root.innerHTML = `<div class="plyr__video-embed"><iframe src="${url.replace('watch?v=', 'embed/')}?origin=${window.location.origin}&iv_load_policy=3&modestbranding=1&playsinline=1&showinfo=0&rel=0&enablejsapi=1" allowfullscreen allowtransparency allow="autoplay"></iframe></div>`;
        player = new Plyr(root.querySelector('iframe'), commonConfig);
        
      } else if (isVimeo(url)) {
        root.innerHTML = `<div class="plyr__video-embed"><iframe src="https://player.vimeo.com/video/${toVimeoId(url)}?loop=false&byline=false&portrait=false&title=false&speed=true&transparent=0&gesture=media" allowfullscreen allowtransparency allow="autoplay"></iframe></div>`;
        player = new Plyr(root.querySelector('iframe'), commonConfig);
        
      } else if (isHls(url)) {
        root.innerHTML = `<video class="plyr" controls playsinline></video>`;
        const video = root.querySelector('video');
        player = new Plyr(video, commonConfig);
        
        hls = new Hls();
        hls.loadSource(url);
        hls.attachMedia(video);
        window.hls = hls;
        
      } else if (isMP4(url)) {
        root.innerHTML = `<video class"plyr" controls playsinline>
                      <source src="${url}" type="video/mp4">
                    </video>`;
        const video = root.querySelector('video');
        player = new Plyr(video, commonConfig);

      } else {
        root.innerHTML = `<div class="p-5 bg-dark text-white text-center rounded-3">Không thể tải video. Định dạng không được hỗ trợ.</div>`;
      }
      
      // ⭐ 4. ADDED: Event listener for when video finishes
      if(player) {
        player.on('ended', () => {
          console.log('Video ended, marking as complete.');
          markLectureAsComplete();
        });
      }
    }

    lectureLinks.forEach(li => {
      li.addEventListener('click', () => {
        lectureLinks.forEach(x => x.classList.remove('active', 'bg-light'));
        li.classList.add('active', 'bg-light');
        
        const url = li.dataset.videoUrl;
        const title = li.dataset.lectureTitle;
        
        // Pass the clicked <li> element to mountPlayer
        mountPlayer(url, li); 
        
        titleEl.textContent = `Đang xem: ${title}`;
      });
    });

    const first = document.querySelector('.lecture-link');
    if (first) {
      first.classList.add('active', 'bg-light');
      // Pass the first <li> element to mountPlayer
      mountPlayer(first.dataset.videoUrl, first); 
      titleEl.textContent = `Đang xem: ${first.dataset.lectureTitle}`;
    }

    // --- Star Rating JS ---
    const ratingInput = document.getElementById('ratingInput');
    const stars = document.querySelectorAll('.star-rating-input > i');

    if (ratingInput && stars.length) {
      const setRating = (value) => {
        ratingInput.value = value;
        stars.forEach(star => {
          if (star.dataset.value <= value) {
            star.classList.add('filled', 'bi-star-fill');
            star.classList.remove('bi-star');
          } else {
            star.classList.remove('filled', 'bi-star-fill');
            star.classList.add('bi-star');
          }
        });
      };

      stars.forEach(star => {
        star.addEventListener('mouseover', () => {
          stars.forEach(s => {
            if (s.dataset.value <= star.dataset.value) {
              s.classList.add('hover', 'bi-star-fill');
              s.classList.remove('bi-star');
            } else {
              s.classList.remove('hover', 'bi-star-fill');
              s.classList.add('bi-star');
            }
          });
        });

        star.addEventListener('mouseout', () => {
          stars.forEach(s => s.classList.remove('hover'));
          setRating(ratingInput.value); // Reset to current selected rating
        });

        star.addEventListener('click', () => {
          setRating(star.dataset.value);
        });
      });
    }

    // --- Handle Review Tab Anchor ---
    // If the URL has #pane-reviews, switch to that tab
    if(window.location.hash === '#pane-reviews') {
      const tab = document.getElementById('tab-reviews');
      if (tab) {
        new bootstrap.Tab(tab).show();
      }
    }

  });
</script>
{{/section}}